
---------------------------------------------------------------------------------------------------------------------------

WINDOW.BTOA

The btoa() method encodes a string in base-64.
Base64 encoding and decoding.
This is to ensure that the data remain intact without modification during transport.

The atob() function decodes a string of data which has been encoded using base-64 encoding. Conversely, the btoa() function creates a base-64 encoded ASCII string from a "string" of binary data.

-----------------------------------------PROTOTYPE-------------------------------------------------------------------------
Example that clears it:

//SuperType constructor function
function SuperType(){
	this.name = "Virat"
}

//SuperType prototype
SuperType.prototype.getSuperName = function(){
	return this.name
}

//SubType prototype function
function SubType(){
	this.age = 26
}

//Inherit the properties from SuperType
SubType.prototype = new SuperType();

//Add new property to SubType prototype
SubType.prototype.getSubAge = function(){
	return this.age;
}

//Create a SubType object
var subTypeObj = new SubType();
console.log(subTypeObj.name); //Output: Virat
console.log(subTypeObj.age); //Output: 26
console.log(subTypeObj.getSuperName()); //Output: Virat
console.log(subTypeObj.getSubAge()); //Output: 26

-----------------------------------------EVENT BUBBLING & CAPTURING----------------------------------------------------------

Event bubbling and capturing are two ways of event propagation in the HTML DOM API, when an event occurs in an element inside another element, and both elements have registered a handle for that event. 

a.
	Event capturing
	When you use event capturing

				   | |
	---------------| |-----------------
	| element1     | |                |
	|   -----------| |-----------     |
	|   |element2  \ /          |     |
	|   -------------------------     |
	|        Event CAPTURING          |
	-----------------------------------

b.
	Event bubbling
	When you use event bubbling

				   / \
	---------------| |-----------------
	| element1     | |                |
	|   -----------| |-----------     |
	|   |element2  | |          |     |
	|   -------------------------     |
	|        Event BUBBLING           |
	-----------------------------------
	the event handler of element2 fires first, the event handler of element1 fires last.


element1.addEventListener('click',doSomething2,true)
element2.addEventListener('click',doSomething,false)
If its last argument is true the event handler is set for the capturing phase, if it is false the event handler is set for the bubbling phase.

below is example::
-------------------
script.js
----------
var ting1 = function(){
	alert("grand parent");
	console.log("ting");
	};
document.getElementById('class1').addEventListener('click',ting1,true);


var ting2 = function(){
	alert("parent");
	console.log("ting");
	};
document.getElementById('class2').addEventListener('click',ting2);


var ting3 = function(){
	alert("child");
	console.log("ting");
	};
document.getElementById('class3').addEventListener('click',ting3,true);

main.html
------------
	<h4>event capturing and bubbling</h4>
		
		<div id="class1">grand parent
			<div id="class2">parent
				<div >Ting
					<div id="class3">child</div>
				</div>
			</div>
		</div>

-----------------------------------TERNARY OPERATOR-------------------------------------

condition ? (answer if true) || (answer if false)

------------------------------------ARRAY------------------------------------------------

The pop() method removes the last element of an array, and returns that element.
To remove the first element of an array, use the shift() method.























































































