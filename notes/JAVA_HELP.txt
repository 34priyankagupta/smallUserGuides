ConcurrentModificationException occurs when we try to modify list/set during iteration process. This is what called ConcurrentModificationException
Fail-fast (if list is structurally modified at any time after the iterator is created, in any way except through the iterator’s own remove or add methods, the iterator will throw a ConcurrentModificationException

1.  ArrayList is better than traditional array as it array size is  fixed but its dynamically increases as required. It implements List interface.
	ArrayList is non-synchronized which means multiple threads can work on ArrayList at the same time.
	ArrayList<String> obj = new ArrayList<String>();
	obj.add("Ajeet")

	
2.  LinkedList implements list, Deque interfaces. it is more of a sequential list, we can add in first element or last element
	LinkedList<String> linkedlist = new LinkedList<String>();
	---Differences: 
	ArrayList maintains index based system for its elements as it uses array data structure implicitly which makes it faster for searching an element in the list. On the other side LinkedList implements doubly linked list which requires the traversal through all the elements for searching an element.
	1) As explained above the insert and remove operations give good performance (O(1)) in LinkedList compared to ArrayList(O(n)).
	2) Search (get method) operations are fast in Arraylist (O(1)) but not in LinkedList (O(n)) so If there are less add and remove operations and more search operations requirement, ArrayList would be your best bet.
	3) They both maintain the elements insertion order which means while displaying ArrayList and LinkedList elements the result set would be having the same 	order in which the elements got inserted into the List.
	4) Both these classes are non-synchronized and can be made synchronized explicitly by using Collections.synchronizedList method.
	
3. 	Vector implements List Interface. Like ArrayList it also maintains insertion order but it is rarely used in non-thread environment as it is synchronized and
	due to which it gives poor performance in searching, adding, delete and update of its elements.
	Vector is synchronized. This means if one thread is working on Vector, no other thread can get a hold of it. Unlike ArrayList, only one thread can perform an operation on vector at a time. It creates an empty Vector with the default initial capacity of 10. It means the Vector will be re-sized when the 11th elements needs to be inserted into the Vector. Note: By default vector doubles its size. 
	Vector vec= new Vector(4, 6)
	
4. HashMap (implements Map interface)is a Map based collection class that is used for storing Key & value pairs, it is denoted as HashMap<Key, Value> or
	HashMap<K, V>. 
	This class makes no guarantees as to the order of the map. It is similar to the Hashtable class except that it is unsynchronized and permits nulls(null
	values and null key).It is not an ordered collection which means it does not return the keys and values in the same order in which they have been inserted into the HashMap. It does not sort the stored keys and Values
	HashMap<Integer, String> hmap = new HashMap<Integer, String>();
	hmap.put(12, "Chaitanya");
	
5. TreeMap class implements Map interface similar to HashMap class. The main difference between them is that HashMap is an unordered collection while TreeMap is
	sorted in the ascending order of its keys. TreeMap is unsynchronized collection class which means it is not suitable for thread-safe operations. Does not allow null keys, but it can have null value.
	TreeMap<Integer, String> tmap = new TreeMap<Integer, String>();
	tmap.put(1, "Data1");
	tmap.put(2, null);
	if you want to turn non-synchrous to synchronous, u need Map m = Collections.synchronizedMap(new LinkedHashMap(...));
	
6. LinkedHashMap is a Hash table and linked list implementation of the Map interface, with predictable iteration order. LinkedHashMap maintains the insertion
	order. it allows null value and key. also its same as hashmap but insertion order differs.
	LinkedHashMap<Integer, String> lhmap = new LinkedHashMap<Integer, String>();
	lhmap.put(22, "Abey");
	
7. HashSet Class implements the Set interface, backed by a hash table. This class permits the null element. This class is not synchronized. HashSet allows null
	values. HashSet doesn’t allow duplicates. If you try to add a duplicate element in HashSet, the old value would be overwritten HashSet doesn’t maintain any
	order, the elements would be returned in any random order.
	HashSet<String> hset = new HashSet<String>();
	
8. TreeSet is similar to HashSet except that it sorts the elements in the ascending order while HashSet doesn’t maintain any order. TreeSet does not allow null value.
	TreeSet<String> tset = new TreeSet<String>();
	tset.add("ABC");
	
9. LinkedHashSet maintains the insertion order. Elements gets sorted in the same sequence in which they have been added to the Set. LinkedHashSet is also an
	implementation of Set interface. It allows null values.
	LinkedHashSet<String> lhset = new LinkedHashSet<String>();
	lhset.add("Z");
	
10.  Hashtable This class implements a hash table, which maps keys to values. Any non-null object can be used as a key or as a value. Hashtable is similar to
	HashMap except it is synchronized. So it is thread safe so if a thread works on this hashtable than another thread has to wait until its work is done.
	if you try to add another key with same name, it will update the existing value of that key. Fail-fast does not happen here.
	Hashtable<String, String> hashtable = new Hashtable<String, String>();
	hashtable.put("Key1","Chaitanya");
	
11.  QUEUE: A Queue is designed in such a way so that the elements added to it are placed at the end of Queue and removed from the beginning of Queue. 
	FIFO (First In First Out). Queue interface in Java collections has two implementation: LinkedList and PriorityQueue, these two classes implements Queue
	interface. Queue is an interface so we cannot instantiate it, rather we create instance of LinkedList or PriorityQueue.
	Queue q1 = new LinkedList();
	Queue q2 = new PriorityQueue();
	q1.add("Rick");
	
12. Deque is a Queue in which you can add and remove elements from both sides. In the Java Queue tutorial we have seen that the Queue follows FIFO 
	(First in First out) .Deque is an interface and has two implementations: LinkedList and ArrayDeque.
	Deque dq = new LinkedList();
	Deque dq = new ArrayDeque();
	

	List<E>:
	An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted.
	The user can access elements by their integer index (position in the list), and search for elements in the list.
	
	Set<E>:
	A collection that contains no duplicate elements. More formally, sets contain no pair of elements e1 and e2 such that e1.equals(e2), and at most one null
	element. As implied by its name, this interface models the mathematical set abstraction.
	
13. Iterator is used for iterating (looping) various collection classes such as HashMap, ArrayList, LinkedList etc. 

	ArrayList<String> names = new ArrayList<String>();
    names.add("Chaitanya");
    names.add("Steve");
    names.add("Jack");
 
    Iterator<String> it = names.iterator();
 
    while(it.hasNext()) {
      String obj = it.next();
      System.out.println(obj);
	  // while iterating if we try to modify: 
	  // names.add("ting");  // ConcurrentModificationException
    }
	
14. ConcurrentHashMap: HashMap is the Class which is under Traditional Collection and ConcurrentHashMap is a Class which is under Concurrent Collections.
	ConcurrentHashMap is Thread-safe in nature. ConcurrentHashMap performance is low sometimes because sometimes Threads are required to wait on ConcurrentHashMap. In ConcurrentHashMap, we wont get any ConcurrentModificationException while performing any modification at the time of Iteration.
	In ConcurrentHashMap null value is not allowed for key and value, otherwise we will get Run-time exception saying NullPointerException.
	
---------------------------------------------------SERIALIZATION-------------------------------------------------------------------------

Serialization is a mechanism to convert an object into stream of bytes so that it can be written into a file, transported through a network or stored into database. De-serialization is just a vice versa. The object should implement Serializable interface and we can use java.io.ObjectOutputStream to write object to file or to any OutputStream object. 

----------------------------------------------------STATIC-------------------------------------------------------------------------------

Static method in base class which will be hidden in subclass, and Non-static method which will be overridden in derived class.  A static method can access only static variables of class and invoke only static methods of the class.
Static methods can not override.
We can use static keyword with a class level variable. A static variable is a class variable and doesn’t belong to Object/instance of the class.

---------------------------------------------------STATIC CLASS-----------------------------------------------------------------------------
We can’t declare a top-level class as static however an inner class can be declared as static. If inner class is declared as static, it’s called static nested class.

GIVEN an example below

---------------------------------------------------ERROR N EXCEPTION----------------------------------------------------------------------

Error
----------
AnnotationFormatError - Thrown when the annotation parser attempts to read an annotation from a class file and determines that the annotation is malformed.
AssertionError - Thrown to indicate that an assertion has failed.
LinkageError - Subclasses of LinkageError indicate that a class has some dependency on another class; however, the latter class has incompatibly changed after the compilation of the former class.
VirtualMachineError - Thrown to indicate that the Java Virtual Machine is broken or has run out of resources necessary for it to continue operating.
OutOfMemoryError 

Unchecked 
----------
ArrayIndexOutOfBoundsException	
ClassCastException 
IllegalArgumentException 
IllegalStateException 
NullPointerException 
NumberFormatException 
AssertionError 
ExceptionInInitializerError 
StackOverflowError 
NoClassDefFoundError 


Checked 
----------
Exception 
IOException 
FileNotFoundException 
ParseException 
ClassNotFoundException 
CloneNotSupportedException 
InstantiationException 
InterruptedException	
NoSuchMethodException	
NoSuchFieldException	

-------------------------------------------------JRE----------JDK-----------JVM----------------------------------------------------------------------

JRE (Java Runtime) is needed for running Java programs. JDK (Java Development Kit), which includes JRE plus the development tools (such as compiler and debugger), is need for writing (developing) as well as running Java programs. In other words, JRE is a subset of JDK. Since you are supposed to write Java Programs, you should install JDK, which includes JRE. Basically JRE is the container, JVM is the content.
JRE = JVM + Java Packages Classes (like util, math, lang, awt, swing etc) + runtime libraries.

JDK: JDK is a superset of JRE, it contains everything that JRE has along with development tools such as compiler, debugger etc.
Javac compiler translates JAVA-high level programming language into machine language (.class which is actually in byte)
Java Virtual Machine (JVM) is a virtual machine that resides in the real machine (your computer) and JVM runs byte code.
JVM executes the byte code generated by compiler and produce output. JVM is the one that makes java platform independent.
The primary function of JVM is to execute the byte code produced by compiler.
Which means that the byte code generated on Windows can be run on Mac OS and vice versa. That is why we call java as platform independent language.
The Java Virtual machine (JVM) is the virtual machine that runs on actual machine (your computer) and executes Java byte code. The JVM doesn’t understand
Java source code, that’s why we need to have javac compiler that compiles *.java files to obtain *.class files that contain the byte codes understood by
the JVM. JVM makes java portable (write once, run anywhere). Each operating system has different JVM, however the output they produce after execution of
byte code is same across all operating systems.

JIT (Just In Time) is part of JVM and used to improve JVM performance by dynamically compiling or translating Java byte codes into native machine language code during execution time.

JRE: JRE is the environment within which the java virtual machine runs. JRE contains Java virtual Machine(JVM), class libraries, and other files excluding development tools such as compiler and debugger.
Which means you can run the code in JRE but you can’t develop and compile the code in JRE.

JDK: JDK is a superset of JRE, it contains everything that JRE has along with development tools such as compiler, debugger etc.


Why?????? public static void main(String[] args)  {
	
public: This makes the main method public that means that we can call the method from outside the class.

static: We do not need to create object for static methods to run. They can run itself.

void: It does not return anything.

main: It is the method name. This is the entry point method from which the JVM can run your program.

(String[] args): Used for command line arguments that are passed as strings. We will cover that in a separate post.
	
	
	
----------------------------------------------SEARCH ALGORITHM--------------------------------------------------------
	
	LINEAR SEARCH :  sequential search made one by one checking all the items
	
	But if element is present in the end most of the location then linear search is not so good, use binary search then
	
	BINARY SEARCH : 
		a. fast search algorithm with time complexity and 0(logN)
		b. based on divide and conquer
		c. data item should be sorted  (this is the limitation of binary search that data list should be sorted already)
		
		while low <= high
		do mid (low+ high)/2
		if v= A[mid]
		return mid
		if v>A [mid]
		low = mid+1
		else
		high = mid - 1
		return NIL
		
----------------------------------------------SORT ALGORITHM--------------------------------------------------------

	QUICK SORT: 
		a. based on positioning of array of data into smaller arrays
		b. uses concept of divide and rule
		c. finds an element called 'pivot'  (left pivot, right pivot)
		d. efficient for large data
		e. average and worst case complexity 0(n logN)
		f. recursive steps:
			1. find pivot that divides the array in 2 halves
			2. quick sort left half
			3. quick sort right half


--------------------WRAPPER, AUTOBOXING-------------------------------------

Java wrapper classes are the Object representation of eight primitive types in java. All the wrapper classes in java are immutable and final. Java 5 autoboxing and unboxing allows easy conversion between primitive types and their corresponding wrapper classes.

Java is statically typed and also a strongly typed language where each variable and expression type is already known at compile time.
Generally we use primitive types but sometime we need to use object, and to do this JAVA provides wrapper class to us.

Java has two categories of data:
--------------------------------
Primitive data (e.g., number, character)  (total 8 primitive type is there- int, long, short, byte,char,float, double, boolean)
Object data (programmer created types)

Autoboxing: Automatic conversion of primitive types to the object of their corresponding wrapper classes is known as autoboxing. For example – conversion of int to Integer, long to Long, double to Double etc.

Unboxing: It is just the reverse process of autoboxing. Automatically converting an object of a wrapper class to its corresponding primitive type is known as unboxing. For example – conversion of Integer to int, Long to long, Double to double etc.

Integer x = 5; // boxes int to an Integer object (taken care by the compiler)
x =  x + 10;   // unboxes the Integer to a (x is unboxed so that they can be added as an int)
System.out.println(x); 
	
	
	Primitive Data types and their Corresponding Wrapper class:::::::::
	-----------------------------------------------------------
	char - Character
	byte - Byte
	short - Short
	long - Long
	float - Float
	double - Double
	boolean - Boolean
	int - Integer
	
	
	Need of Wrapper Classes:::::
	------------------------
	
1.	They convert primitive data types into objects. Objects are needed if we wish to modify the arguments passed into a method (because primitive types are passed by value).

2.	The classes in java.util package handles only objects and hence wrapper classes help in this case also.

3.	Data structures in the Collection framework, such as ArrayList and Vector, store only objects (reference types) and not primitive types.

4.	An object is needed to support synchronization in multithreading.
	
	
-------------------------------------------------------------THREAD IN JAVA-------------------------------------------------------------------
	
	Java provides built-in support for multithreaded programming. When a Java program starts up, one thread begins running immediately. This is usually called the main thread of our program, because it is the one that is executed when our program begins.
	
	For each program, a Main thread is created by JVM(Java Virtual Machine). The “Main” thread first verifies the existence of the main() method, and then it initializes the class. Note that from JDK 6, main() method is mandatory in a standalone java application. A thread, in the context of Java, is the path followed when executing a program. All Java programs have at least one thread, known as the main thread, which is created by the Java Virtual Machine (JVM) at the program’s start, when the main() method is invoked with the main thread.
	
	New – When we create an instance of Thread class, a thread is in a new state.
	Running – The Java thread is in running state.
	Suspended – A running thread can be suspended, which temporarily suspends its activity. A suspended thread can then be resumed, allowing it to pick up where it left off.
	Blocked – A java thread can be blocked when waiting for a resource.
	Terminated – A thread can be terminated, which halts its execution immediately at any given time. Once a thread is terminated, it cannot be resumed. 
	
	The main thread is created automatically when our program is started. To control it we must obtain a reference to it. This can be done by calling the method currentThread( ) which is present in Thread class. This method returns a reference to the thread on which it is called. The default priority of Main thread is 5 and for all remaining user threads priority will be inherited from parent to child.
	
	create a new thread, your program will either extend Thread or implement the Runnable interface.

	The Thread class defines several methods that help manage threads.The table below displays the same:

	1.	Method - 	Meaning
	2.	getName -	Obtain thread’s name
	3.	getPriority -	Obtain thread’s priority
	4.	isAlive -	Determine if a thread is still running
	5.	join -	Wait for a thread to terminate
	6.	run -	Entry point for the thread
	7.	sleep -	Suspend a thread for a period of time
	8.	start -	Start a thread by calling its run method
	
	What is the major difference between implementing Runnable or extend thread? we can extend only one class in java...if we extend thread then we can not extend another class whereas we can implement multiple interfaces
	
	implementing runnable
	----------------------
	public class MyClass implements Runnable {
	public void run(){
	System.out.println("MyClass running");
	   } 
	}

	Thread t1 = new Thread(new MyClass ());
	t1.start();
	
	
	Extending Java Thread
	----------------------
	public class MyClass extends Thread {
		 public void run(){
		 System.out.println("MyClass running");
	   }
	}
	
	MyClass t1 = new MyClass ();
	T1.start();
	
	
-------------------------------------------------------------STRING-----------------------------------------------------------------------------------
	
There are two ways to create a String object:
	
1.	By string literal : Java String literal is created by using double quotes. Object creates in common string pool. if value already exists then it returns
	the same reference.
	For Example: String s=“Welcome”;  
	
2.	By new keyword : Java String is created by using a keyword “new”. Object creates in heap
	For example: String s=new String(“Welcome”);  
	It creates two objects (in String pool and in heap) and one reference variable where the variable ‘s’ will refer to the object in the heap.	
	
	
	Java String is immutable and final, so a new String is created whenever we do String manipulation. So for, String manipulations are resource consuming, Java provides two utility classes: StringBuffer and StringBuilder.
	
	Differences in StringBuffer and StringBuilder.
	------------------------------------------------
	StringBuffer and StringBuilder are mutable classes. StringBuffer operations are thread-safe and synchronized whereas StringBuilder operations are not thread-safe.
	StringBuffer is to be used when multiple threads are working on same String and StringBuilder in the single threaded environment.
	StringBuilder performance is faster when compared to StringBuffer because of no overhead of synchronized.
	
	
	
----------------------------------------TESTING------------------------------------------------------------------

A Functional Test makes sure the application allows the user to perform an action. A Unit Test makes sure the code behaves how the programmer expects.
"Functional test" is rather end-to-end test.
		
	
------------------------------------------------------------- AUTOCLOSEABLE--------------------------------------------------------------------------
this particular interface helps to autoclose 

public class Java7ResourceManagement {

	public static void main(String[] args) {

		try (MyResource mr = new MyResource()) {
			System.out.println("MyResource created in try-with-resources");
		} catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("Out of try-catch block.");
	}

	static class MyResource implements AutoCloseable{

		@Override
		public void close() throws Exception {
			System.out.println("Closing MyResource");
		}

	}
}
	
------------------------------------------------------ASPECT ORIENTED PROGRAMMING-----------------------------------------------------------------
There are five types of advice in spring AOP.

1. Before advice: Advice that executes before a join point, but which does not have the ability to prevent execution flow proceeding to the join point (unless it throws an exception).

2. After returning advice: Advice to be executed after a join point completes normally: for example, if a method returns without throwing an exception.

3. After throwing advice: Advice to be executed if a method exits by throwing an exception.

4. After advice: Advice to be executed regardless of the means by which a join point exits (normal or exceptional return).

5. Around advice: Advice that surrounds a join point such as a method invocation. This is the most powerful kind of advice. Around advice can perform custom behavior before and after the method invocation. It is also responsible for choosing whether to proceed to the join point or to shortcut the advised method execution by returning its own return value or throwing an exception.



@Before("execution(* EmployeeManager.getEmployeeById(..))")         //point-cut expression
    public void logBeforeV1(JoinPoint joinPoint)
    {
	
	
@Pointcut("execution(* com.luv2code.aopdemo.dao.*.*(..))")
	public void forDaoPackage() {}

@Before("com.luv2code.aopdemo.aspect.LuvAopExpressions.forDaoPackage()")
	public void performApiAnalytics() {
		System.out.println("\n========>>> 0. Performing API analytics <<<=============");
	}
	
@AfterThrowing(pointcut = "execution(* com.luv2code.aopdemo.dao.AccountDAO.findAccounts(..))", throwing = "theExc")
	public void afterThrowingFindAccountsAdvice(JoinPoint thejoinPoint, Throwable theExc) {
	
	
@AfterReturning(pointcut = "execution(* com.luv2code.aopdemo.dao.AccountDAO.findAccounts(..))", returning = "result")
	public void afterRunningFindAccountsService(JoinPoint theJoinPoint, List<Account> result) {

	
----------------------------------------------Concrete class-----------------------------------------------

A class which is not abstract is referred as Concrete class. 
	
	
-----------------------------------JAVA OOPS CONCEPT---------------------------------------------------

1. Abstraction: Abstraction is a process of hiding the implementation details from the user. Оnly the functionality will be provided to the user. In Java, abstraction is achieved using abstract classes and interfaces. Interfaces provide 100% abstraction while abstract classes  provides partial abstraction

2. Encapsulation : Make the instance variables private so that they cannot be accessed directly from outside the class. You can only set and get values of these variables through the methods of the class. Have getter and setter methods in the class to set and get the values of the fields. Encapsulation is also known as “data Hiding“.

3. Polymorphism: Polymorphism is the capability of a method to do different things. Inheritance is a good example for this.
	a. Method Overloading in Java – This is an example of compile time (or static polymorphism)
	b. Method Overriding in Java – This is an example of runtime time (or dynamic polymorphism)
	
4. Inheritance:	Inheritance is a process of defining a new class based on an existing class by extending its common data members and methods.
Inheritance allows us to reuse of code, it improves reusability in your java application.
Note: The biggest advantage of Inheritance is that the code that is already present in base class need not be rewritten in the child class.

5. Association: Association is a relationship between two separate classes.

6. Aggregation: We need it To maintain code re-usability. Suppose 2 classes are created, and one class is using reference of another class in it, which means code is reused and they have a Has-a relationship between them.

7. Composition: Composition is a restricted form of Aggregation in which two entities (or you can say classes) are highly dependent on each other. For e.g. Human and Heart. A human needs heart to live and a heart needs a Human body to survive. In other words when the classes (entities) are dependent on each other and their life span are same (if one dies then another one too) then its a composition. Heart class has no sense if Human class is not present.

Platform independence means that you can run the same Java Program in any Operating System. For example, you can write java program in Windows and run it in Mac OS.

java.lang.Object is the root class for all the java classes and we don’t need to extend it.

Java is not said to be pure object-oriented because it supports primitive types such as int, byte, short, long etc
suppose i want to convert a string into int, we cannot do it using primitive int but using Object Integer (wrapper class) as in Integer.parse("90")

main() method is the entry point of any standalone java application. The syntax of main method is public static void main(String args[]).

Java main method is public and static so that Java runtime can access it without initializing the class. 

------------------------------------------------ Access Modifier ---------------------------------

In java we have four access modifiers:
----------------


1. default: If class member doesn’t have any access modifier specified, then it’s treated with default access. The access rules are similar as classes and the class member with default access will be accessible to the classes in the same package only. This access is more restricted than public and protected but less restricted than private.

2. private: If class member is “private” then it will be accessible only inside the same class. This is the most restricted access.

3. protected: If class member is “protected” then it will be accessible only to the classes in the same package and to the subclasses. This modifier is less restricted from private but more restricted from public access. Usually we use this keyword to make sure the class variables are accessible only to the subclasses. So suppose if subclass is in different package, even then it can access parent class.

4. public: The member variable or method is accessed globally. 

-------------------------------------------------FINALIZE---------------------------------------------------------

finalize() is a special method in Object class that we can override in our classes. This method gets called by the garbage collector when the object is getting garbage collected. This method is usually overridden to release system resources when the object is garbage collected.

------------------------------------------------INNER Class-----------------------------------------------------

public void print() {
        //local inner class inside the method
        class Logger {
            String name;
        }
        //instantiate local inner class in the method to use
        Logger logger = new Logger();
		
	
-------------------------------------------------INNER STATIC CLASS--------------------------------------------------------------



package com.journaldev.nested;

import java.io.File;
import java.io.FilenameFilter;

public class OuterClass {
    
    private static String name = "OuterClass";
    private int i;
    protected int j;
    int k;
    public int l;

    //OuterClass constructor
    public OuterClass(int i, int j, int k, int l) {
        this.i = i;
        this.j = j;
        this.k = k;
        this.l = l;
    }

    public int getI() {
        return this.i;
    }

    //static nested class, can access OuterClass static variables/methods
    static class StaticNestedClass {
        private int a;
        protected int b;
        int c;
        public int d;

        public int getA() {
            return this.a;
        }

        public String getName() {
            return name;
        }
    }

    //inner class, non static and can access all the variables/methods of outer class
    class InnerClass {
        private int w;
        protected int x;
        int y;
        public int z;

        public int getW() {
            return this.w;
        }

        public void setValues() {
            this.w = i;
            this.x = j;
            this.y = k;
            this.z = l;
        }

        @Override
        public String toString() {
            return "w=" + w + ":x=" + x + ":y=" + y + ":z=" + z;
        }

        public String getName() {
            return name;
        }
    }

    //local inner class
    public void print(String initial) {
        //local inner class inside the method
        class Logger {
            String name;

            public Logger(String name) {
                this.name = name;
            }

            public void log(String str) {
                System.out.println(this.name + ": " + str);
            }
        }

        Logger logger = new Logger(initial);
        logger.log(name);
        logger.log("" + this.i);
        logger.log("" + this.j);
        logger.log("" + this.k);
        logger.log("" + this.l);
    }

    //anonymous inner class
    public String[] getFilesInDir(String dir, final String ext) {
        File file = new File(dir);
        //anonymous inner class implementing FilenameFilter interface
        String[] filesList = file.list(new FilenameFilter() {

            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(ext);
            }

        });
        return filesList;
    }
}


local inner class:   If a class is defined in a method body, it’s known as local inner class. Since local inner class is not associated with Object, we can’t use private, public or protected access modifiers with it. The only allowed modifiers are abstract or final
	
java inner class:    Any non-static nested class is known as inner class in java. Java inner class is associated with the object of the class and they can access all the variables and methods of the outer class.

anonymous inner class:    A local inner class without name is known as anonymous inner class. An anonymous class is defined and instantiated in a single statement.
	
	
------------------------------------------------------------STATIC IMPORT---------------------------------------------------------------

What is static import?
If we have to use any static variable or method from other class, usually we import the class and then use the method/variable with class name.
	
-----------------------------------------------------------try-with-resources------------------------------------------------------------

One of the Java 7 features is the try-with-resources statement for automatic resource management. Before Java 7, there was no auto resource management and we should explicitly close the resource. Usually, it was done in the finally block of a try-catch statement. This approach used to cause memory leaks when we forgot to close the resource. try-with-resources implements autocloseable, you can find it in inputstream also	.

-------------------------------------------------------------multi-catch block ---------------------------------------------------------

before java 7 :

catch (IOException ex) {
     logger.error(ex);
     throw new MyException(ex.getMessage());
catch (SQLException ex) {
     logger.error(ex);
     throw new MyException(ex.getMessage());
}

-----

after java 7 :


catch(IOException | SQLException ex){
     logger.error(ex);
     throw new MyException(ex.getMessage());
}

------------------------------------------------------------ABSTRACT CLASSES---------------------------------------------------

Abstract class in Java is similar to interface except that it can contain default method implementation. An abstract class can have an abstract method without body and it can have methods with implementation also. We can run abstract class in java like any other class if it has main() method.
	
-------------------------------------------Can an interface implement or extend another interface?----------------------------------

Interfaces don’t implement another interface, they extend it. Since interfaces can’t have method implementations, there is no issue of diamond problem (where compiler can’t decide which superclass method to use). That’s why we have multiple inheritance in interfaces i.e an interface can extend multiple interfaces.

From Java 8 onwards, interfaces can have default method implementations, then it is not mandatory to provide implementation for default methods of interface to the class which is implementing this interface.
Default method in interface is defined method.	
But if we created another interface that is using another default method with same name, then comes a class which implements both of the interfaces then we have to define the default method in that class otherwise compiler would throw an error as diamond problem can come to picture.

public interface Interface1 {

	void method1(String str);
	
	default void log(String str){
		System.out.println("I1 logging::"+str);
	}
}

public interface Interface2 {

	void method2();
	
	default void log(String str){
		System.out.println("I2 logging::"+str);
	}

}

public class MyClass implements Interface1, Interface2 {

	@Override
	public void method2() {
	}

	@Override
	public void method1(String str) {
	}

	@Override
	public void log(String str){
		System.out.println("MyClass logging::"+str);
		Interface1.print("abc");
	}
}


-----------------------------------------------------MARKER INTERFACE-----------------------------------------------------------
	
A marker interface is an empty interface without any method but used to force some functionality in implementing classes by Java. Some of the well known marker interfaces are Serializable and Cloneable.


----------------------------------------------------ENUM--------------------------------------------------------------------

Enum was introduced in Java 1.5 as a new type whose fields consists of fixed set of constants. Enum constructors are always private. We can declare abstract methods in java enum, then all the enum fields must implement the abstract method.

enum is the keyword to create an enum type and similar to the class. Enum constants are implicitly static and final.

public class ThreadStatesConstant {
	public static final int START = 1;
	public static final int WAITING = 2;
	public static final int RUNNING = 3;
	public static final int DEAD = 4;
}

public enum ThreadStates {
	START,
	RUNNING,
	WAITING,
	DEAD;
}
	
-------------------------------------------------------Java Reflection API----------------------------------------------------

Java Reflection API provides the ability to inspect and modify the runtime behavior of java application. We can inspect a java class, interface, enum and get their methods and field details.

--------------------------------------------------------Garbage Collection-------------------------------------------------------

Garbage Collection is the process of looking at heap memory, identifying which objects are in use and which are not, and deleting the unused objects. In Java, process of deallocating memory is handled automatically by the garbage collector.	
	
-----------------------------------------------How to run a JAR file through command prompt-----------------------------------

We can run a jar file using java command but it requires Main-Class entry in jar manifest file. Main-Class is the entry point of the jar and used by java command to execute the class

----------------------------------------------------System class--------------------------------------------------------------

System class is final so that we can’t subclass and override its behavior through inheritance. System class doesn’t provide any public constructors, so we can’t instantiate this class and that’s why all of its methods are static.
	
-----------------------------------------------------Java is Pass by Value -----------------------------------------------------

Java is always Pass by Value and not pass by reference

----------------------------------------------------------Heap and Stack Memory----------------------------------------------------------
	
Heap memory is used by all the parts of the application whereas stack memory is used only by one thread of execution.
Whenever an object is created, it’s always stored in the Heap space and stack memory contains the reference to it. Stack memory only contains local primitive variables and reference variables to objects in heap space.
Memory management in the stack is done in LIFO manner whereas it’s more complex in Heap memory because it’s used globally.
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	