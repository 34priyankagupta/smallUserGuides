NEW FEATURES JAVA-8

1.  Interface Default and Static Methods
	
	a.	Static Methods in interfaces
		-----------------------------
		Consider the following method of the interface (let’s call this interface Vehicle):
		
		static String producer() {
			return "N&F Vehicles";
		}
		String producer = Vehicle.producer();
		
		
		The static producer() method is available only through and inside of an interface. It can’t be overridden by an implementing class.
		(Since we can say this looks too much like abstract class except that it can be instantiated but abstract classes cannot and also in abstract class methods can be overridden but in this new feature case method cannot be overridden )

		To call it outside the interface the standard approach for static method call should be used:
	
	b.	Default Method
		Default methods are declared using the new default keyword. These are accessible through the instance of the implementing class and can be overridden.

		Let’s add a default method to our Vehicle interface, which will also make a call to the static method of this interface:

		default String getOverview() {
			return "ATV made by " + producer();
		}
		Vehicle vehicle = new VehicleImpl();
		String overview = vehicle.getOverview();
		
		Assume that this interface is implemented by the class VehicleImpl. For executing the default method an instance of this class should be created:
		

2.	Optional<T>
	
	Java 8 Optional<T> class can help to handle situations where there is a possibility of getting the NullPointerException(NPE). It works as a container for the object of type T. It can return a value of this object if this value is not a null. When the value inside this container is null it allows doing some predefined actions instead of throwing NPE.
	