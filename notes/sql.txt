
-----------------------------------------------------------DISTINCT---------------------------------------------------------------------------------

SELECT DISTINCT Country FROM Customers; to get unique value

SELECT Count(*) AS DistinctCountries FROM (SELECT DISTINCT Country FROM Customers); ::: Here total number will be seen in another coloumn

-----------------------------------------------------------WHERE-----------------------------------------------------------------------------------

SELECT * FROM table_name WHERE NOT condition

SELECT * FROM table_name WHERE condition1 OR condition2 OR condition3

SELECT * FROM table_name WHERE condition1 AND condition2 AND condition3 ...;

------------------------------------------------------------ORDER BY----------------------------------------------------------------------------------

SELECT * FROM Customers ORDER BY Country;

SELECT * FROM Customers ORDER BY Country DESC | ASC;

SELECT * FROM Customers ORDER BY Country ASC, CustomerName DESC;


----------------------------------------------------------INSERT-----------------------------------------------------------------------------------

INSERT INTO Customers (CustomerName, City, Country) VALUES ('Cardinal', 'Stavanger', 'Norway');

----------------------------------------------------------NULL-------------------------------------------------------------------------------------

SELECT column_names FROM table_name WHERE column_name IS NOT NULL;

SELECT column_names FROM table_name WHERE column_name IS NULL;

-----------------------------------------------------------UPDATE----------------------------------------------------------------------------------

UPDATE Customers SET ContactName = 'Alfred Schmidt', City= 'Frankfurt' WHERE CustomerID = 1;

-----------------------------------------------------------DELETE-----------------------------------------------------------------------------------

DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';

DELETE FROM table_name; // delete everything

----------------------------------------------------------TOP---LIMIT------------------------------------------------------------------------------

SELECT TOP 50 PERCENT * FROM Customers;

SELECT TOP 3 * FROM Customers WHERE Country='Germany';

SELECT * FROM Customers WHERE Country='Germany' AND ROWNUM <= 3;

----------------------------------------------------------MIN MAX------------------------------------------------------------------------------------

SELECT MIN(column_name) AS SmallestPrice FROM table_name WHERE condition;

SELECT MAX(column_name) AS LargestPrice FROM table_name WHERE condition;

---------------------------------------------------------AVG SUM COUNT-------------------------------------------------------------------------------

SELECT COUNT(column_name) AS TING FROM table_name WHERE condition;

SELECT AVG(column_name) AS TING FROM table_name WHERE condition;

SELECT SUM(column_name) AS TING FROM table_name WHERE condition;

---------------------------------------------------------LIKE-------------------------------------------------------------------------------------------

There are two wildcards used in conjunction with the LIKE operator:

% - The percent sign represents zero, one, or multiple characters
_ - The underscore represents a single character

WHERE CustomerName LIKE 'a%'	Finds any values that start with "a"
WHERE CustomerName LIKE '%a'	Finds any values that end with "a"
WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%'	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%_%'	Finds any values that start with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o'	Finds any values that start with "a" and ends with "o"


SELECT * FROM Customers WHERE CustomerName NOT LIKE 'a%';

SELECT * FROM Customers WHERE ContactName LIKE 'a%o';

--------------------------------------------------------IN-----------------------------------------------------------------------------------

The IN operator allows you to specify multiple values in a WHERE clause.

The IN operator is a shorthand for multiple OR conditions.

SELECT * FROM Customers WHERE Country IN ('Germany', 'France', 'UK');

--------------------------------------------------------BETWEEN---------------------------------------------------------------------------------

SELECT * FROM Products WHERE Price BETWEEN 10 AND 20;

-----------------------------------------------------ALIAS-------------------------------------------------------------------------------------

SELECT CustomerID as ID, CustomerName AS Customer FROM Customers;SELECT CustomerID as ID, CustomerName AS Customer FROM Customers;

SQL aliases are used to give a table, or a column in a table, a temporary name

-----------------------------------------------------JOIN--------------------------------------------------------------------------------------

A JOIN clause is used to combine rows from two or more tables, based on a related column between them.

(INNER) JOIN: Returns records that have matching values in both tables
LEFT (OUTER) JOIN: Return all records from the left table, and the matched records from the right table
RIGHT (OUTER) JOIN: Return all records from the right table, and the matched records from the left table
FULL (OUTER) JOIN: Return all records when there is a match in either left or right table

------------------------------------INNER JOIN--------------------------------------------------------------------------------------

SELECT Orders.OrderID, Customers.CustomerName FROM Orders INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID;

involving 3 tables

SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName FROM ((Orders INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);

------------------------------------LEFT JOIN--------------------------------------------------------------------------------------

SELECT column_name(s) FROM table1 LEFT JOIN table2 ON table1.column_name = table2.column_name;

SELECT Customers.CustomerName, Orders.OrderID FROM Customers LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID ORDER BY Customers.CustomerName;

-------------------------------------RIGHT JOIN--------------------------------------------------------------------------------------

SELECT column_name(s) FROM table1 RIGHT JOIN table2 ON table1.column_name = table2.column_name;

SELECT Orders.OrderID, Employees.LastName, Employees.FirstName FROM Orders RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID ORDER BY Orders.OrderID;

-------------------------------------FULL OUTER JOIN--------------------------------------------------------------------------------

The FULL OUTER JOIN keyword return all records when there is a match in either left (table1) or right (table2) table records.

SELECT column_name(s) FROM table1 FULL OUTER JOIN table2 ON table1.column_name = table2.column_name;

--------------------------------------SELF JOIN--------------------------------------------------------------------------------

A self JOIN is a regular join, but the table is joined with itself.

SELECT column_name(s) FROM table1 T1, table1 T2 WHERE condition;

SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City FROM Customers A, Customers B WHERE A.CustomerID <> B.CustomerID
AND A.City = B.City ORDER BY A.City;

---------------------------------------UNION--&--UNION ALL--------------------------------------------------------------------------------

So, here is no concept of separate coloumns. So columns to display should be equal, which after they will get merged

The UNION operator is used to combine the result-set of two or more SELECT statements

The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL:

SELECT City FROM Customers UNION SELECT City FROM Suppliers ORDER BY City;

SELECT City, Country FROM Customers WHERE Country='Germany' UNION ALL SELECT City, Country FROM Suppliers WHERE Country='Germany' ORDER BY City;

-------------------------------------------------------GROUP BY----------------------------------------------------------------------------------

The GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.

SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country;

SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID
GROUP BY ShipperName;

-------------------------------------------------------HAVING ------------------------------------------------------------------------------------

The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.

SELECT column_name(s) FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);

SELECT COUNT(CustomerID), Country FROM Customers GROUP BY Country HAVING COUNT(CustomerID) > 5 ORDER BY COUNT(CustomerID) DESC;

----------------------------------------------------EXISTS---------------------------------------------------------------------------------------

Somewhat similar to INNER JOIN, just that it never shows anything of 2nd table

SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE SupplierId = Suppliers.supplierId AND Price = 22);











































